assign_values:
  assign:
    parameters: ${incoming.body}

authenticate:
  template: extract-token
  requestType: post
  headers:
    cookie: ${incoming.headers.cookie}
  body:
    role: "ROLE_ADMINISTRATOR"
  result: permission

validatePermission:
  switch:
    - condition: ${permission}
      next: getFileLocations
  next: returnUnauthorized

getFileLocations:
  call: http.get
  args:
    url: "[#TRAINING_PUBLIC_RUUTER]:[#TRAINING_PUBLIC_RUUTER_PORT]/return-file-locations"
  result: fileLocations

assignFilePath:
  assign:
    file_end: "_nlu.yml"

checkIntentFileYaml:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]:[#TRAINING_DMAPPER_PORT]/file/check
    body:
      file_path: ${fileLocations.response.body.response.intents_location + parameters.intent + file_end}
  result: fileExists

validateFileExists:
  switch:
    - condition: ${fileExists.response.body}
      next: getIntentFile
  next: assignTmpFilePath

assignTmpFilePath:
  assign:
    file_end: "_nlu.yml.tmp"

checkIntentFileTmp:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]:[#TRAINING_DMAPPER_PORT]/file/check
    body:
      file_path: ${fileLocations.response.body.response.intents_location + parameters.intent + file_end}
  result: tmpFileExists

validateTmpFileExists:
  switch:
    - condition: ${tmpFileExists.response.body}
      next: getIntentFile
  next: returnIntentFileMissing

getIntentFile:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]:[#TRAINING_DMAPPER_PORT]/file/read
    body:
      file_path: ${fileLocations.response.body.response.intents_location + parameters.intent + file_end}
  result: intentFile

convertYamlToJson:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]:[#TRAINING_DMAPPER_PORT]/convert/yaml-to-json
    body:
      file: ${intentFile.response.body.file}
  result: intentData

replaceString:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]:[#TRAINING_DMAPPER_PORT]/convert/string/replace
    body:
      data: ${intentData.response.body.nlu[0].examples}
      search: "- "
      replace: ""
  result: replacedString

splitExamples:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]:[#TRAINING_DMAPPER_PORT]/convert/string/split
    body:
      data: ${replacedString.response.body}
      separator: "\n"
  result: splitExamples

validateExample:
  switch:
    - condition: ${!splitExamples.response.body.includes(parameters.example)}
      next: returnExampleIsMissing
    - condition: ${parameters.new_example.length >= 500}
      next: returnExampleTooLong
  next: replaceExistingExample

replaceExistingExample:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]:[#TRAINING_DMAPPER_PORT]/merge/replace-array-element
    body:
      element: ${parameters.example}
      newValue: ${parameters.new_example}
      array: ${splitExamples.response.body}
  result: replacedExamples

mapIntentsData:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]:[#TRAINING_DMAPPER_PORT]/dmapper/get-intent-file
    body:
      intent: ${parameters.intent}
      examples: ${replacedExamples.response.body}
  result: intentFileJson

convertJsonToYaml:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]:[#TRAINING_DMAPPER_PORT]/convert/json-to-yaml
    body:
      version: "3.0"
      nlu: ${intentFileJson.response.body}
  result: intentYaml

saveIntentFile:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]:[#TRAINING_DMAPPER_PORT]/file/write
    body:
      file_path: ${fileLocations.response.body.response.intents_location + parameters.intent + file_end}
      content: ${intentYaml.response.body.json}
  result: fileResult
  next: returnSuccess

returnSuccess:
  return: "Example updated"
  next: end

returnExampleTooLong:
  return: "Example is too long"
  next: end

returnExampleIsMissing:
  return: "Can't find example"
  status: 409
  next: end

returnIntentFileMissing:
  return: "Intent file to update is missing"
  next: end

returnUnauthorized:
  return: "error: unauthorized"
  next: end
