authenticate:
  template: extract-token
  requestType: post
  headers:
    cookie: ${incoming.headers.cookie}
  body:
    role: "ROLE_ADMINISTRATOR"
  result: permission

validatePermission:
  switch:
    - condition: ${permission}
      next: getFileLocations
  next: returnUnauthorized

getFileLocations:
  call: http.get
  args:
    url: "[#TRAINING_PUBLIC_RUUTER]:[#TRAINING_PUBLIC_RUUTER_PORT]/return-file-locations"
  result: fileLocations

getRulesFile:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]:[#TRAINING_DMAPPER_PORT]/file/read
    body:
      file_path: ${fileLocations.response.body.response.rules_location}
  result: ruleFile

getRulesData:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]:[#TRAINING_DMAPPER_PORT]/convert/yaml-to-json
    body:
      file: ${ruleFile.response.body.file}
  result: rulesData

getStoriesFile:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]:[#TRAINING_DMAPPER_PORT]/file/read
    body:
      file_path: ${fileLocations.response.body.response.stories_location}
  result: storiesFile

getStoriesData:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]:[#TRAINING_DMAPPER_PORT]/convert/yaml-to-json
    body:
      file: ${storiesFile.response.body.file}
  result: storiesData

getResponses:
  call: http.get
  args:
    url: "[#TRAINING_OPENSEARCH]:[#TRAINING_OPENSEARCH_PORT]/responses/_search?size=10000"
  result: getResponsesResult

mapDependenciesData:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]:[#TRAINING_DMAPPER_PORT]/dmapper/get-responses-dependencies
    body:
      rules: ${rulesData.response.body.rules}
      stories: ${storiesData.response.body.stories}
      responses: ${getResponsesResult.response.body.hits.hits}
  result: dependenciesData

returnSuccess:
  return: ${dependenciesData.response.body}
  next: end

returnUnauthorized:
  return: "error: unauthorized"
  next: end
