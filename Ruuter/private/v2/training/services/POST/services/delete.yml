check_for_required_parameters:
  switch:
    - condition: ${incoming.body.id == null || incoming.body.type == null}
      next: return_incorrect_request
  next: extract_request_data

extract_request_data:
  assign:
    id: ${incoming.body.id}
    ruuter_type: ${incoming.body.type.toUpperCase()}
  next: get_status_name

get_status_name:
  call: http.post
  args:
    url: "[#SERVICE_RESQL]:[#SERVICE_RESQL_PORT]/get-service-name-by-id"
    body:
      id: ${id}
  result: name_res
  next: get_current_status

get_current_status:
  call: http.post
  args:
    url: "[#SERVICE_RESQL]:[#SERVICE_RESQL_PORT]/status"
    body:
      id: ${id}
  result: status_res
  next: check_status

check_status:
  switch:
    - condition: ${status_res.response.body[0].currentState === 'active'}
      next: return_cannot_delete_active_service
  next: assign_old_path

assign_old_path:
  assign:
    old_file_status_path: ${status_res.response.body[0].currentState}
  next: delete_service

delete_service:
  call: http.post
  args:
    url: "[#SERVICE_RESQL]:[#SERVICE_RESQL_PORT]/delete-service"
    body:
      id: ${id}
  result: res
  next: check_service_file_exists

check_service_file_exists:
  call: http.post
  args:
    url: "[#SERVICE_NODE]:[#SERVICE_NODE_PORT]/file/check"
    body:
      file_path: "/Ruuter/${ruuter_type}/services/${old_file_status_path}/${name_res.response.body[0].name}.tmp"
  result: service_file_exists
  next: validate_service_file_exists

validate_service_file_exists:
  switch:
    - condition: ${!!service_file_exists.response.body}
      next: delete_deactivated_service
  next: delete_response

delete_deactivated_service:
  call: http.post
  args:
    url: "[#SERVICE_NODE]:[#SERVICE_NODE_PORT]/file/delete"
    body:
      path: "/Ruuter/${ruuter_type}/services/${old_file_status_path}/${name_res.response.body[0].name}.tmp"
  result: results
  next: check_result

check_result:
  switch:
    - condition: ${200 <= results.response.statusCodeValue && results.response.statusCodeValue < 300}
      next: delete_response
  next: return_bad_request

delete_response:
  call: http.post
  args:
    url: host.docker.internal:8080/rasa/responses/delete
    headers:
      cookie: ""
    body:
      response_name: "utter_service_${name_res.response.body[0].name}"
  result: delete_response_result
  next: check_intent_file_exists

check_intent_file_exists:
  call: http.post
  args:
    url: "[#SERVICE_NODE]:[#SERVICE_NODE_PORT]/file/check"
    body:
      file_path: "/mock1/data/nlu/removed/service_${name_res.response.body[0].name}_nlu.tmp"
  result: intent_file_exists_result
  next: validate_intent_file_exists

validate_intent_file_exists:
  switch:
    - condition: ${!!intent_file_exists_result.response.body}
      next: delete_intent
  next: return_ok

delete_intent:
  call: http.post
  args:
    url: "[#SERVICE_NODE]:[#SERVICE_NODE_PORT]/file/delete"
    body:
      path: "/mock1/data/nlu/removed/service_${name_res.response.body[0].name}_nlu.tmp"
  result: delete_intent_result
  next: return_ok

return_ok:
  status: 200
  return: "Service Deleted Successfully"
  next: end

return_bad_request:
  status: 400
  return: ${results.response.body.message}
  next: end

return_incorrect_request:
  status: 400
  return: "Required parameter(s) missing"
  next: end

return_cannot_delete_active_service:
  status: 400
  return: "Cannot delete active service"
  next: end
