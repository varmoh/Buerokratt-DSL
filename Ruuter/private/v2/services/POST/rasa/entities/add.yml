assign_values:
  assign:
    parameters: ${incoming.body}

getDomainFile:
  call: http.get
  args:
    url: http://ruuter:8085/domain-file
  result: domainData

validateEntities:
  switch:
    - condition: ${domainData.response.body.response.entities.includes(parameters.entity)}
      next: returnEntityExists
  next: mergeEntities

mergeEntities:
  call: http.post
  args:
    url: "[#SERVICE_NODE]:[#SERVICE_NODE_PORT]/file/merge"
    body:
      array1: ${domainData.response.body.response.entities}
      array2: ${[parameters.entity]}
  result: mergedEntities

convertJsonToYaml:
  call: http.post
  args:
    url: "[#SERVICE_NODE]:[#SERVICE_NODE_PORT]/conversion/json_to_yaml"
    body:
      version: ${domainData.response.body.response.version}
      intents: ${domainData.response.body.response.intents}
      entities: ${mergedEntities.response.body}
      slots: ${domainData.response.body.response.slots}
      forms: ${domainData.response.body.response.forms}
      actions: ${domainData.response.body.response.actions}
      responses: ${domainData.response.body.response.responses}
      session_config: ${domainData.response.body.response.session_config}
  result: domainYaml

getFileLocations:
  call: http.get
  args:
    url: http://ruuter:8085/return-file-locations
  result: fileLocations

saveDomainFile:
  call: http.post
  args:
    url: "[#SERVICE_NODE]:[#SERVICE_NODE_PORT]/file/write"
    body:
      file_path: ${fileLocations.response.body.response.domain_location}
      content: ${domainYaml.response.body.json}
  result: fileResult
  next: returnSuccess

returnSuccess:
  return: "Entity added"
  next: end

returnEntityExists:
  return: "Entity exists"
  status: 409
  next: end  
  