set_variables:
  assign:
    metrics: ${incoming.body.metrics}

get-timescale:
  call: http.post
  args:
    url: "[#ANALYTICS_RESQL]/get-period-times"
    body:
      start: ${incoming.body.start}
      end: ${incoming.body.end}
      period: ${incoming.body.period}
  result: times

check-get-chat-count-total:
  switch:
    - condition: ${metrics.includes('get-chat-count-total')}
      next: get-chat-count-total

empty-get-chat-count-total:
  assign:
    get_chat_count_total_result: ${[]}
  next: check-get-chat-count-no-csa

get-chat-count-total:
  call: http.post
  args:
    url: "[#ANALYTICS_RESQL]/get-chat-count-total"
    body:
      start: ${times.response.body[0].start}
      end: ${times.response.body[0].end}
  result: get_chat_count_total_result

check-get-chat-count-no-csa:
  switch:
    - condition: ${metrics.includes('get-chat-count-no-csa')}
      next: get-chat-count-no-csa

empty-get-chat-count-no-csa:
  assign:
    get_chat_count_no_csa_result: ${[]}
  next: check-get-avg-waiting-time

get-chat-count-no-csa:
  call: http.post
  args:
    url: "[#ANALYTICS_RESQL]/get-chat-count-no-csa"
    body:
      start: ${times.response.body[0].start}
      end: ${times.response.body[0].end}
  result: get_chat_count_no_csa_result

check-get-avg-waiting-time:
  switch:
    - condition: ${metrics.includes('get-avg-waiting-time')}
      next: get-avg-waiting-time

empty-get-avg-waiting-time:
  assign:
    get_avg_waiting_time_result: ${[]}
  next: check-get-avg-messages

get-avg-waiting-time:
  call: http.post
  args:
    url: "[#ANALYTICS_RESQL]/get-avg-waiting-time"
    body:
      start: ${times.response.body[0].start}
      end: ${times.response.body[0].end}
  result: get_avg_waiting_time_result

check-get-avg-messages:
  switch:
    - condition: ${metrics.includes('get-avg-messages')}
      next: get-avg-messages

empty-get-avg-messages:
  assign:
    get_avg_messages_result: ${[]}
  next: check-get-avg-time

get-avg-messages:
  call: http.post
  args:
    url: "[#ANALYTICS_RESQL]/get-avg-messages"
    body:
      start: ${times.response.body[0].start}
      end: ${times.response.body[0].end}
  result: get_avg_messages_result

check-get-avg-time:
  switch:
    - condition: ${metrics.includes('get-avg-time')}
      next: get-avg-time

empty-get-avg-time:
  assign:
    get_avg_time_result: ${[]}
  next: check-get-avg-time-no-csa

get-avg-time:
  call: http.post
  args:
    url: "[#ANALYTICS_RESQL]/get-avg-time"
    body:
      start: ${times.response.body[0].start}
      end: ${times.response.body[0].end}
  result: get_avg_time_result

check-get-avg-time-no-csa:
  switch:
    - condition: ${metrics.includes('get-avg-time-no-csa')}
      next: get-avg-time-no-csa

empty-get-avg-time-no-csa:
  assign:
    get_avg_time_no_csa_result: ${[]}
  next: check-get-avg-time-csa

get-avg-time-no-csa:
  call: http.post
  args:
    url: "[#ANALYTICS_RESQL]/get-avg-time-no-csa"
    body:
      start: ${times.response.body[0].start}
      end: ${times.response.body[0].end}
  result: get_avg_time_no_csa_result

check-get-avg-time-csa:
  switch:
    - condition: ${metrics.includes('get-avg-time-csa')}
      next: get-avg-time-csa

empty-get-avg-time-csa:
  assign:
    get_avg_time_csa_result: ${[]}
  next: check-get-avg-session-length-client-left

get-avg-time-csa:
  call: http.post
  args:
    url: "[#ANALYTICS_RESQL]/get-avg-time-csa"
    body:
      start: ${times.response.body[0].start}
      end: ${times.response.body[0].end}
  result: get_avg_time_csa_result

check-get-avg-session-length-client-left:
  switch:
    - condition: ${metrics.includes('get-avg-session-length-client-left')}
      next: get-avg-session-length-client-left

empty-get-avg-session-length-client-left:
  assign:
    get_avg_session_length_client_left_result: ${[]}
  next: check-get-avg-session-length-csa

get-avg-session-length-client-left:
  call: http.post
  args:
    url: "[#ANALYTICS_RESQL]/get-avg-session-length-client-left"
    body:
      start: ${times.response.body[0].start}
      end: ${times.response.body[0].end}
  result: get_avg_session_length_client_left_result

check-get-avg-session-length-csa:
  switch:
    - condition: ${metrics.includes('get-avg-session-length-csa')}
      next: get-avg-session-length-csa

empty-get-avg-session-length-csa:
  assign:
    get_avg_session_length_csa_result: ${[]}
  next: check-get-avg-session-length-no-csa

get-avg-session-length-csa:
  call: http.post
  args:
    url: "[#ANALYTICS_RESQL]/get-avg-session-length-csa"
    body:
      start: ${times.response.body[0].start}
      end: ${times.response.body[0].end}
  result: get_avg_session_length_csa_result

check-get-avg-session-length-no-csa:
  switch:
    - condition: ${metrics.includes('get-avg-session-length-no-csa')}
      next: get-avg-session-length-no-csa

empty-get-avg-session-length-no-csa:
  assign:
    get_avg_session_length_no_csa_result: ${[]}
  next: check-get-avg-response-time

get-avg-session-length-no-csa:
  call: http.post
  args:
    url: "[#ANALYTICS_RESQL]/get-avg-session-length-no-csa"
    body:
      start: ${times.response.body[0].start}
      end: ${times.response.body[0].end}
  result: get_avg_session_length_no_csa_result

check-get-avg-response-time:
  switch:
    - condition: ${metrics.includes('get-avg-response-time')}
      next: get-avg-response-time

empty-get-avg-response-time:
  assign:
    get_avg_response_time_result: ${[]}
  next: check-get-pct-correctly-understood

get-avg-response-time:
  call: http.post
  args:
    url: "[#ANALYTICS_RESQL]/get-avg-response-time"
    body:
      start: ${times.response.body[0].start}
      end: ${times.response.body[0].end}
  result: get_avg_response_time_result

check-get-pct-correctly-understood:
  switch:
    - condition: ${metrics.includes('get-pct-correctly-understood')}
      next: get-pct-correctly-understood

empty-get-pct-correctly-understood:
  assign:
    get_pct_correctly_understood_result: ${[]}
  next: gather_responses

get-pct-correctly-understood:
  call: http.post
  args:
    url: "[#ANALYTICS_RESQL]/get-pct-correctly-understood"
    body:
      start: ${times.response.body[0].start}
      end: ${times.response.body[0].end}
  result: get_pct_correctly_understood_result
  
gather_responses:
  assign:
    results: ${[get_chat_count_total_result,get_chat_count_no_csa_result,get_avg_waiting_time_result,get_avg_messages_result,get_avg_time_result,get_avg_time_no_csa_result,get_avg_time_csa_result,get_avg_session_length_client_left_result,get_avg_session_length_csa_result,get_avg_session_length_no_csa_result,get_avg_response_time_result,get_pct_correctly_understood_result]}
    fields: ${['chat_count_total','chat_count_no_csa','avg_waiting_time_seconds','avg_messages','avg_time_seconds','avg_time_no_csa_seconds','avg_time_csa_seconds','avg_session_length_client_left_seconds','avg_session_length_csa_seconds','avg_session_length_no_csa_seconds','avg_response_time_seconds','pct_correctly_understood']}

convert_data:
  call: http.post
  args:
    url: "[#ANALYTICS_DMAPPER]/hbs/analytics/array-to-object"
    headers:
      type: 'json'
    body:
      results: ${results}
      fields: ${fields}
      layout: false
  result: dataObject

to_csv:
  template: csv
  requestType: post
  body:
    data: ${[dataObject.response.body]}
    qul: ''
    del: ''
  result: csv

return:      
  return: ${csv}
  next: end
